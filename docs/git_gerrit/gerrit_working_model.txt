This document out lines how we'll use gerrit.

-------
purpose
-------
	- do a little better than our current cvs/no-review model
	- very little overhead
	- not something extensive / complex 

----------------------------
Installation & Configuration
----------------------------

Summary / Intent
----------------
- use openId for web user control
- use ssh for repository commit user control
- have a new group called approvers
	- only a few people on here like 2
	- approvers are the only ones with submit access


Details
-------
Prerequisite
- Have a server & linux user for gerrit & downloaded gerrit-2.1.5.war & java 1.6 installed & mysql installed

Steps

Install Gerrit (on the server)
- Create a mysql database called "reviewdb" and a user/password for gerrit to use.
- we'll put everything into /var/gerrit/* (no real reason, just where the disk space was allocated on the server)
- run "java -jar gerrit-2.1.5.war init -d review_site", from here on accept the defaults if not mentione here
- at "Sql Database", enter "mysql" instead.
- at "SMTP server hostname", enter either a mcmaster or google smtp server information, gmails's example maybe : smtp.gmail.com:465, ssl, gerrit@oscarmcmaster.org
- use SSL for the http daemon.
- for http daemon listen port put it back to 8080 (instead of 8443)
- at "Canonical Url", enter the proper hostname / url for your server (https://source.oscartools.org:8080/)
- create a self signed certificate, change the number of days to something huge like 10 years.
- note the set_env.sh script here, it's a convenience script you may wish to put in your directory some where, if you source this script you can run gerrit.sh from anywhere.
- Note that we have accepted the default ports 8080 and 29418, I see no reason to change these.
- edit the file review_site/etc/gerrit.config
	- in the section "ssdh" add "threads=8"
	- in the section "container" add "heapLimit=384m"
- At this point, gerrit may or may not have auto started itself, you need to either start or restart gerrit because of the above configuration change. gerrit.sh should do that if you've used the set_env.sh script.


Configure Gerrit (from your client / developer machine)
- goto "http://127.0.0.1:8080" (or what ever host name you need to use.)
- on the top right click on register. Select one of the methods to register/login, I'm using my google ID "r6squeegee@gmail.com" in this example. Note the first user to register is an administrator, everyone else after is a regular user.
	- For "Full Name" enter the persons name and click "save changed" (yes you actually need to click that now).
	- For "select a unique username" this will become your ssh access username, we might want to state that it's your email address (before the @ sign) as a standard. You need to click "select username" now.
	- For "Register an SSH public key" : if you already know or have SSH keys you can just provide it, otherwise do the following : 
		- on your client machine / developer machine : "ssh-keygen -t rsa", do not enter a password when it asks. This means... if you machine is compromised, your gerrit user is compromised and the corresponding server key should be deleted.
		- now cut and paste the contents of "~/.ssh/id_rsa.pub" into the text area on the web page.
		- click add and it should list it as an added key on the screen.
	- now on the bottom of the screen there's a link that says "continue" click that, now you should be at the your "code review dashboard" screen.
- on the top left of the screen, click on admin -> groups. Create a new group called "code approvers", Create a second group called "code submitters"
- on the top left of the screen, click on admin -> projects. Then select "all projects", then select "access".
	- add the new permissions category="code review", group name="code approvers", range=+2/-2
	- add the new permissions category="verified", group name="code approvers", range=+1/-1
	- add the new permissions category="submit", group name="code approvers", range=+1
	- add the new permissions category="Code Review", group name="code submitters", range=+1/-1
	- add the new permissions category="Forge Identity", group name="code submitters", range=+1
	- add the new permissions category="Read Access", group name="code submitters", range=+2
	- remove permissions for "Registered Users" : "Forge Identity","Code Review", and "Submit" 

Add a project (from client / developer machine)
- from the command line, do a "ssh -p 29418 r6squeegee@127.0.0.1 gerrit create-project --name foo" (where foo is your project name).
- now you'll want to clone the project in your favourite git tool, and commit & push all the previous files / existing code that's being ported.


-----------
Replication
-----------
Original intent of this section is replication of gerrit to sourceforge, this should generally be the same for any other git repository though.
- the SF server is oscarmcmaster.git.sourcegorge.net
- ssh to the above server with the gerrit linux user so the known_hosts file is populated, you don't actually have to login.
- generate an ssh key as per the "ssh-keygen -t rsa" command if you don't already have a key
- register a user for gerrit with sourceforge, i.e. we're using gerrit@oscarmcmaster.org for all the emails so we might as well register that user for replication.
- need to add gerrit public key to sourceforge
- add config file gerrit/review_site/etc/replication.config with contents
	[remote "sourceforge"]
	  url = ssh://oscargerrit@oscarmcmaster.git.sourceforge.net/gitroot/oscarmcmaster/${name}

and it appears to all work! amazing :)

------------------------------
Public / Anonymous Read Access
------------------------------
There's a script provided here called start_git_daemon.sh, if you changed the directories, you will need to edit this file to make the directories match.

Run this script and it will start git-daemon in the background to allows public access to all the repositories. You also might want to have this script run upon server startup.

----------------
Review Work Flow
----------------
Reviewer logins in, select one of the branches, click review, if it's good set verified=+1, review=+2, then click publish and submit, and it's into the main branch.

---------------
Review Criteria
---------------
The following are guide lines for evaluating submissions. This is in no way an exhaustive list.
	- Code must compile and run.
	- If the time frame is after code freeze, it must only be bug fixes, features can be submitted but will not be approved till after.
	- Is the submission an end user feature, if it is, is the feature outlined in this versions development plan (as per ISO requirement)
	- Does the submission include automated tests, i.e. junit tests for DAO's and logic methods, possibly in the future httpUnit for jsp's.
	- Should and does the submission include documentation on the feature, applies to all features; end user, administrative, and developer features.
	- general sanity of the code itself, i.e. coding standards, reusability, maintainability, readability, industry standards, proper decomosition etc.	 

------------------
Server maintenance
------------------
The data on this machine is not critical. All repository data on this machine is replicated to sourceforge, and is also available on developers machines who have pulled from this machine.

Having said that, I think we should still back up this machine. The above steps should help us reconfigure the machine if necessary, but reconfiguring and reregistering all the users and setting up everyones ssh keys etc would be a pain.

Because of the above, we could live with an infrequent backup, i.e. once a week. If the server fails, we can restore it from a week old backup, then restore the git repository from sourceforge. The only things we'd lose then is any new user registrations in the last week.

To backup the system, the site directory should be backed up (/var/gerrrit/* will include the site directory), the mysql database (reviewdb). The only thing lost then would be your ssh keys as I don't think those are backup-able upon server change (though they might be).

There's logs in /var/gerrit/review_site/logs/* that should be cleaned out every once in a while. They generally have no use for us.


--------------------------------------
Importing existing repository From CVS
--------------------------------------
On the gerrit server do the following : 

get the cvs repositories
------------------------
The reason we want to do this instead of convertin over pserver is because we want to clean up the repositories before converting them, i.e. for the integrator remove the HNR subproject, and for oscar remove the directories which won't exist after a maven conversion, i.e. libs, oscardocs etc.
- rsync -av rsync://oscarmcmaster.cvs.sourceforge.net/cvsroot/oscarmcmaster/* .

convert cvs to git
------------------
The below commands were based off a pserver run, but we should be doing a local repository run for most of the projects as per the above comment about getting the cvs repositories.
- cd /tmp
- CVSROOT=:pserver:anonymous@oscarmcmaster.cvs.sourceforge.net:/cvsroot/oscarmcmaster cvs login
- git cvsimport -v -d :pserver:anonymous@oscarmcmaster.cvs.sourceforge.net:/cvsroot/oscarmcmaster -C test2  oscar_mcmaster/docs

or

- rsync -av rsync://myoscar.cvs.sourceforge.net/cvsroot/myoscar/* .
- then do the gitcvsimport from the local directory


import git into gerrit
----------------------
- gerrit.sh stop
- cd /var/gerrit/review_site/git
- cp -r /tmp/test2/.git test2.git
- cp test.git/config test2.git/config
- rm test2.git/hooks/*.sample
- cp test.git/hooks test2.git/hooks
- in mysql : insert into projects (use_contributor_agreements,use_content_merge,submit_type,name) values ('N','M','Y','test2');
- gerrit.sh start


clean up cvs stuff
------------------
- If you clone the git repository you'll now find a bunch of .cvsignores lying around, you need to manually convert these to .gitignores


convert old branches
--------------------
As per the cvsimport documentation, we should never commit to converted branches, therefore, we must create new ones. I'm assuming this implies we can not create childs of converted branches either.
Conversion routine would therefore be as follows:

- On the Gerrit Web UI, Admin->Projects->oscar->Branches, BranchName=new_RELEASE_10_06, InitialRevision=548fe7c2c3927c436a6ab3b9032c6884b0232825 (the first converted master, so we're creating a proper git branch off the master which should be safe)
- On client workstation do a git pull so it knows of the new branch and shows up on the list of branches.
- On client workstation do a "git checkout RELEASE_10_06", then copy the entire directory to a temporary location like /tmp/10_06, but remove the .git directory (this is important).
- On client workstation do a "git checkout new_RELEASE_10_06", then delete the entire working directory contents (except the .git) and copy back all the files from /tmp/10_06. i.e. you're setting the working directory contents to the branch contents, but leaving git to say you're working off the new and valid branch. 
- now do a "git add -A" and "git push origin HEAD:refs/for/new_RELEASE_10_06"

Note that hudson verification may now fail because it's using the wrong build system, you can go to review the commit, remove hudson as a "failed" reviewer, then just review and approve the commit. 