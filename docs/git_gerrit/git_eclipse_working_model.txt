This document is now falling out of date (2012-02-15), there is a lot of documentation on the internet with regards to gerrit now so there is no real point in maintaining this document. There is even documentation at eclipse themselves http://wiki.eclipse.org/Gerrit on using eclipse with gerrit. This document will be left here for historical purposes for now. In the future, it should be substantially trimmed down to contain information specific to our setup only.

This document is a tutorial for developers migrating from eclipse & cvs. 

This document doesn't isn't required in that if you already have experience using eclipse & git, this will not be of any use to you.

This document is very brief, you should have a basic understanding of GIT before doing this. This basically just explains the tools setup to use GIT, not what GIT is. You need to understand the concept of remote and local repositories.

-------------------
Register For Gerrit (required)
-------------------
Go to the gerrit web site and register your user. The gerrit url should be provided. For this example I will use https://source.oscartools.org:8080 and my email r6squeegee@gmail.com (you'll need to use your own where ever you see my account name).

On the gerrit main screen you should see a register option on the top right of the screen, you should be able to register using openId with your google email or one of the similar options.

On the main registration screen :
	- For "Full Name" enter the persons name and click "save changed" (yes you actually need to click that now).
	- For "select a unique username" this will become your ssh access username, We'll use your email address (before the @ sign) as a standard. You need to click "select username" now.
	- For "Register an SSH public key" : if you already know or have SSH keys you can just provide it, otherwise do the following : 
		- on your client machine / developer machine : "ssh-keygen -t rsa", do not enter a password when it asks. This means... if you machine is compromised, your gerrit user is compromised and the corresponding server key should be deleted, you'll need to tell the gerrit administrator and or login to the gerrit web site and delete this key.
		- now cut and paste the contents of "~/.ssh/id_rsa.pub" into the text area on the web page.
		- click add and it should list it as an added key on the screen.
	- now on the bottom of the screen there's a link that says "continue" click that, now you should be at the your "code review dashboard" screen.
	
At this point you will have an account but to prevent spam/bots we have to manually enable write access to each account. You will need to email devel so we know you've signed up for an account so we can give you write access. You may wish to say hi to everyone and give a brief into into who you are too so we all have a better idea as to who everyone else is. :)

On the top right of the gerrit web pages there's a "Settings" option. In settings, the lest menu will have a "watched projects" option. This will allow you to receive emails when ever anyone commits to the selected projects. This is also a convenient place to see a list of available projects on the system.

At this point, if your eclipse was already running, you need to stop it and start it again. Eclipse caches ssh key information. (really, it does)

------
Plugin (required if using eclipse)
------
Follow the instructions at http://www.eclipse.org/egit/ to install the git eclipse plugin. At the time of this writing I was using 0.9.3.


------------
~/.gitconfig (required, even if using git from command line)
------------
You need a file in your home directory calls .gitconfig, in that file you need at least the [user] section, below is my .gitconfig for reference
	[user]
   		  	name = Ted Leung
       		email = r6squeegee@gmail.com
	[core]
   		  	editor = nano

As a note, you can also edit this file in your eclipse->preferences->team->git, it opens the file in an editor panel for you.


--------------
Add Repository 
--------------
Also known as "cvs checkout" or "git clone ssh://r6squeegee@source.oscartools.org:29418/test".

On the package explorer tab (or what ever your favourite explorer is), right click and select import -> "projects from git" -> clone.

The repository details should be provided for your git/gerrit installation, for my example I will use "ssh://r6squeegee@source.oscartools.org:29418/test". Just continue with the screen flow, most options should be obvious or defaults should be fine.

Now back on the import screen, select the new repository (click on it again even though it's highlighted to make the next button available). Continue with the screen flow, most of the defaults should be fine.

Notice on your package explorer you new have the new project like any other previous project.


---------------
Getting updates
---------------
Also known as "cvs update" or "git pull".

The closest thing to a CVS update is a git pull. It will retrieve the latest from the server and merge them into your working directory.

In more detail, a pull actually does a fetch and then a merge for you. To do this manally/separately :
Right click on the project and do a team -> fetch from. If this is the first time you've done this you'll need to configure the remote repository. On the first screen my option is "origin: ssh//r6squeegee@localhost:29418/foo". On the next screen just accept the defaults. If you follow the next dialogs it will tell you if anything was retrieved. At this point notice your work place hasn't changed. The remote changes were put into your local repository but your local work space hasn't been affected. Right click on the project and go to team -> merge. Click on origin/master on the remote branches. Now you'll see your local work space with the changes.


--------------
Making changes
--------------
Also known as "cvs commit" or "git commit -a; git push".

Now say you've created new files in the project and altered some existing ones.

If you right click on the project, go to team -> commit. You'll see the commit screen. Notice on eclipse it will list the tracked and untracked file and by default they will be "git added" and "git committed" at the same time. Now when you commit, it's commited locally. This means no one else except you has these changes still.

Now to share these changes with everyone else, i.e. committed to the main repository... (You must have committed locally first) 

Now, right click on the project, go to team -> push. 

If this is the first time you've pushed, you'll need to fill in a push specification. source ref="HEAD", destincation ref="refs/for/master", select add spec, check the box on the bottom saying save spec... so you don't have to do this again. Just click "finish" (next doesn't show anything interesting).

If you go to the gerrit web page you should see the change is pending review now. If you receive a permissions error here, it maybe because your account hasn't been authorised yet, to prevent spam/bots we try to make sure only real humans get write access to the repository. You can email the devel list if you think we've missed your account / access.

Note that at this point, you and the central repository are not in sync, the files at the central repository must be approved first. Even after the changes on the central repository are approved, you must follow the "getting updates" again before you and the central repository are in sync (yes even if the files happen to be the same on the 2 servers, the pointers are not in sync until you merge).  

As a note, you should try to do a "team -> pull" before doing a commit, this will help ensure there are no commit conflicts, if there are your commit will not be mergable by gerrit and you'll have to go through a rebase of your commit before it can be merged.

------------------------------------------------
When to commit locally and when to push remotely
------------------------------------------------
Generally speaking you should commit locally for independent small units of work. So as an example if you are working on a feature, you may have incremental phases in completion of that feature. You should commit at each phase, the code should at least compile and run.

Generally speaking pushing remotely can be done for any commit. There is generally no need to bundle up multiple commits into one big push. The difference between a push and commit maybe more important if you're working off line as you can only push while online.

The reason for the above is because of the review model of gerrit. You don't want to do one big commit because it will be a nightmare to review and approve. Think about the example of converting 300 DBHandler calls into maybe 100 JPA objects. If that was 1 commit, it would take for ever to review and verify that commit. If you made 300 separate commits, the review process could at least proceed incrementally and in manageable size chunks. The push is for a similar reason, if you had 300 separate commits and you pushed all at once at the end of 6 months, there will be a sudden flood of 300 commits to review and it would be a huge backlog. If you pushed those 300 commits over a 6 month period, review of the commits could have started as soon as the first push was done. 


--------------
ChangeId Hooks 
--------------
Change ID Hook will add a change ID to every commit you make. The benefit of this is if you change / fix a commit and resubmit it, gerrit will use the changeId to replace the previous commit. 

Note that this conceptually the same as commit --amend but it's actually different because of the gerrit workflow. In general once you have a changeId in the commit message you will be able to use commit --amend on remote commits properly. If you don't have a changeId, a commit --amend will generate 2 commits (if the previous was already pushed) instead of relacing the previous one. 

To install the changeId hook for git command line usage, copy the commit-msg file (located in this directory) into your test/.git/hooks directory (you may need to make the hooks directory) this will effecitvely enable the changeId hook for the test project. When you commit it should add a changeId to the comments. You may need to make sure the file is chmod +x as it's a script.

For Eclipse, the newer versions of the git plugin has a check box option on the commit screen to auto generate changeId's - cool eh?  


-----------------------
Fixing previous commits 
-----------------------
Previously we allowed people to commit a subsequent fix like in CVS, but now that we've been live with git/gerrit for a while, we're going to expect developers to have progressed. We will require people to amend the previous commit via the changeId hooks.

You need to fetch the commit that needs to be fixed and switch to that branch. Login to gerrit and look at the screen for that commit. Around the middle of the screen in the "Patch Set X" area you'll find a download option, the url or command line will be provided there. An example of the line is "     git fetch ssh://r6squeegee@source.oscartools.org:29418/test refs/changes/62/662/2 && git checkout FETCH_HEAD"

From the command line :
- switch to the commit as per above.
- make the changes you need to make
- "git commit --amend" the change (you better have a changeId or it won't work properly, and you're on your own).
- "git push"
- to verify it worked, you should see another patch set in gerrit now, i.e. "Patch Set 2" you should notice the list of files and the changes in them match your update.

From Eclipse : (If you're using the latest eclipse (not all of the docs here was written using the latest eclipse))
- Team -> Remote -> fetch from gerrit. You'll notice the list of changes come up as "2238-1" On the gerrit screen near the download url you'll see "refs/change/38/2238/1" the 2238-1 matches the 2238/1 part, that's how you'll know which commit to get. Follow the routine as per the command line workflow but in eclipse and it should work as expected.


--------------------------------
Rebasing to fix dependency chain
--------------------------------
Here's a real example of what happend, 2 people 2 commit chains but one early conflict in the chain. Here's a picto-diagram of the commits :

master +-> ted1 -> ted2 -> ted3
       |
       `-> marc1 -> marc2 -> marc3
       
As it turns out ted1 & marc1 were virtually identical fixes for the same problem but the problem is that the 2 commits ted1 & marc1 conflicted. ted1's commit was approved in gerrit, which now meant marc1's commit could not be. This meant marc2/3 were also not approvable.

The solution is to rebase marc1 through 3 off of the new master (ted1) then recommit. This is very similar to the previous section about "fixin previous commits".

At the point marc, needs to :
- do a fetch from gerrit so he as the changes ted1 through ted3.
- "git rebase -i origin/master"
- it will notify you of the conflict, you can either fix the conflict then commit, or you can remove that commit (git provides you with instructions on how to do the 2) 
- git rebase --continue (for each conflict it shows)
- git push

you'll end up with one of the following depending on if you fixed the commit or removed that one commit (both are acceptible results) 

master +-> ted1 -> ted2 -> ted3 -> marc1 -> marc2 -> marc3

master +-> ted1 -> ted2 -> ted3 -> marc2 -> marc3
       
